{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { createFulfilledPromise, wrapPromiseWithState } from \"../../../utilities/index.js\";\nvar FragmentReference = /** @class */function () {\n  function FragmentReference(client, watchFragmentOptions, options) {\n    var _this = this;\n    this.key = {};\n    this.listeners = new Set();\n    this.references = 0;\n    this.dispose = this.dispose.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.observable = client.watchFragment(watchFragmentOptions);\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n    var diff = this.getDiff(client, watchFragmentOptions);\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this fragmentRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    var startDisposeTimer = function () {\n      var _a;\n      if (!_this.references) {\n        _this.autoDisposeTimeoutId = setTimeout(_this.dispose, (_a = options.autoDisposeTimeoutMs) !== null && _a !== void 0 ? _a : 30000);\n      }\n    };\n    this.promise = diff.complete ? createFulfilledPromise(diff.result) : this.createPendingPromise();\n    this.subscribeToFragment();\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n  FragmentReference.prototype.listen = function (listener) {\n    var _this = this;\n    this.listeners.add(listener);\n    return function () {\n      _this.listeners.delete(listener);\n    };\n  };\n  FragmentReference.prototype.retain = function () {\n    var _this = this;\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    var disposed = false;\n    return function () {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      _this.references--;\n      setTimeout(function () {\n        if (!_this.references) {\n          _this.dispose();\n        }\n      });\n    };\n  };\n  FragmentReference.prototype.dispose = function () {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  };\n  FragmentReference.prototype.onDispose = function () {\n    // noop. overridable by options\n  };\n  FragmentReference.prototype.subscribeToFragment = function () {\n    this.subscription = this.observable.subscribe(this.handleNext.bind(this), this.handleError.bind(this));\n  };\n  FragmentReference.prototype.handleNext = function (result) {\n    var _a;\n    switch (this.promise.status) {\n      case \"pending\":\n        {\n          if (result.complete) {\n            return (_a = this.resolve) === null || _a === void 0 ? void 0 : _a.call(this, result.data);\n          }\n          this.deliver(this.promise);\n          break;\n        }\n      case \"fulfilled\":\n        {\n          // This can occur when we already have a result written to the cache and\n          // we subscribe for the first time. We create a fulfilled promise in the\n          // constructor with a value that is the same as the first emitted value\n          // so we want to skip delivering it.\n          if (equal(this.promise.value, result.data)) {\n            return;\n          }\n          this.promise = result.complete ? createFulfilledPromise(result.data) : this.createPendingPromise();\n          this.deliver(this.promise);\n        }\n    }\n  };\n  FragmentReference.prototype.handleError = function (error) {\n    var _a;\n    (_a = this.reject) === null || _a === void 0 ? void 0 : _a.call(this, error);\n  };\n  FragmentReference.prototype.deliver = function (promise) {\n    this.listeners.forEach(function (listener) {\n      return listener(promise);\n    });\n  };\n  FragmentReference.prototype.createPendingPromise = function () {\n    var _this = this;\n    return wrapPromiseWithState(new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    }));\n  };\n  FragmentReference.prototype.getDiff = function (client, options) {\n    var cache = client.cache;\n    var from = options.from,\n      fragment = options.fragment,\n      fragmentName = options.fragmentName;\n    var diff = cache.diff(__assign(__assign({}, options), {\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      returnPartialData: true,\n      id: from,\n      optimistic: true\n    }));\n    return __assign(__assign({}, diff), {\n      result: client[\"queryManager\"].maskFragment({\n        fragment: fragment,\n        fragmentName: fragmentName,\n        data: diff.result\n      })\n    });\n  };\n  return FragmentReference;\n}();\nexport { FragmentReference };","map":{"version":3,"sources":["../../../../src/react/internal/cache/FragmentReference.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from \"@wry/equality\";\nimport type {\n  WatchFragmentOptions,\n  WatchFragmentResult,\n} from \"../../../cache/index.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\nimport type { MaybeMasked } from \"../../../masking/index.js\";\nimport {\n  createFulfilledPromise,\n  wrapPromiseWithState,\n} from \"../../../utilities/index.js\";\nimport type {\n  Observable,\n  ObservableSubscription,\n  PromiseWithState,\n} from \"../../../utilities/index.js\";\nimport type { FragmentKey } from \"./types.js\";\n\ntype FragmentRefPromise<TData> = PromiseWithState<TData>;\ntype Listener<TData> = (promise: FragmentRefPromise<TData>) => void;\n\ninterface FragmentReferenceOptions {\n  autoDisposeTimeoutMs?: number;\n  onDispose?: () => void;\n}\n\nexport class FragmentReference<\n  TData = unknown,\n  TVariables = Record<string, unknown>,\n> {\n  public readonly observable: Observable<WatchFragmentResult<TData>>;\n  public readonly key: FragmentKey = {};\n  public promise!: FragmentRefPromise<MaybeMasked<TData>>;\n\n  private resolve: ((result: MaybeMasked<TData>) => void) | undefined;\n  private reject: ((error: unknown) => void) | undefined;\n\n  private subscription!: ObservableSubscription;\n  private listeners = new Set<Listener<MaybeMasked<TData>>>();\n  private autoDisposeTimeoutId?: NodeJS.Timeout;\n\n  private references = 0;\n\n  constructor(\n    client: ApolloClient<any>,\n    watchFragmentOptions: WatchFragmentOptions<TData, TVariables> & {\n      from: string;\n    },\n    options: FragmentReferenceOptions\n  ) {\n    this.dispose = this.dispose.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.handleError = this.handleError.bind(this);\n\n    this.observable = client.watchFragment(watchFragmentOptions);\n\n    if (options.onDispose) {\n      this.onDispose = options.onDispose;\n    }\n\n    const diff = this.getDiff(client, watchFragmentOptions);\n\n    // Start a timer that will automatically dispose of the query if the\n    // suspended resource does not use this fragmentRef in the given time. This\n    // helps prevent memory leaks when a component has unmounted before the\n    // query has finished loading.\n    const startDisposeTimer = () => {\n      if (!this.references) {\n        this.autoDisposeTimeoutId = setTimeout(\n          this.dispose,\n          options.autoDisposeTimeoutMs ?? 30_000\n        );\n      }\n    };\n\n    this.promise =\n      diff.complete ?\n        createFulfilledPromise(diff.result)\n      : this.createPendingPromise();\n    this.subscribeToFragment();\n\n    this.promise.then(startDisposeTimer, startDisposeTimer);\n  }\n\n  listen(listener: Listener<MaybeMasked<TData>>) {\n    this.listeners.add(listener);\n\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  retain() {\n    this.references++;\n    clearTimeout(this.autoDisposeTimeoutId);\n    let disposed = false;\n\n    return () => {\n      if (disposed) {\n        return;\n      }\n\n      disposed = true;\n      this.references--;\n\n      setTimeout(() => {\n        if (!this.references) {\n          this.dispose();\n        }\n      });\n    };\n  }\n\n  private dispose() {\n    this.subscription.unsubscribe();\n    this.onDispose();\n  }\n\n  private onDispose() {\n    // noop. overridable by options\n  }\n\n  private subscribeToFragment() {\n    this.subscription = this.observable.subscribe(\n      this.handleNext.bind(this),\n      this.handleError.bind(this)\n    );\n  }\n\n  private handleNext(result: WatchFragmentResult<TData>) {\n    switch (this.promise.status) {\n      case \"pending\": {\n        if (result.complete) {\n          return this.resolve?.(result.data);\n        }\n\n        this.deliver(this.promise);\n        break;\n      }\n      case \"fulfilled\": {\n        // This can occur when we already have a result written to the cache and\n        // we subscribe for the first time. We create a fulfilled promise in the\n        // constructor with a value that is the same as the first emitted value\n        // so we want to skip delivering it.\n        if (equal(this.promise.value, result.data)) {\n          return;\n        }\n\n        this.promise =\n          result.complete ?\n            createFulfilledPromise(result.data)\n          : this.createPendingPromise();\n\n        this.deliver(this.promise);\n      }\n    }\n  }\n\n  private handleError(error: unknown) {\n    this.reject?.(error);\n  }\n\n  private deliver(promise: FragmentRefPromise<MaybeMasked<TData>>) {\n    this.listeners.forEach((listener) => listener(promise));\n  }\n\n  private createPendingPromise() {\n    return wrapPromiseWithState(\n      new Promise<MaybeMasked<TData>>((resolve, reject) => {\n        this.resolve = resolve;\n        this.reject = reject;\n      })\n    );\n  }\n\n  private getDiff<TData, TVariables>(\n    client: ApolloClient<any>,\n    options: WatchFragmentOptions<TData, TVariables> & { from: string }\n  ) {\n    const { cache } = client;\n    const { from, fragment, fragmentName } = options;\n\n    const diff = cache.diff({\n      ...options,\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      returnPartialData: true,\n      id: from,\n      optimistic: true,\n    });\n\n    return {\n      ...diff,\n      result: client[\"queryManager\"].maskFragment({\n        fragment,\n        fragmentName,\n        data: diff.result,\n      }) as MaybeMasked<TData>,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}