{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport * as React from \"rehackt\";\nimport { __use } from \"./internal/__use.js\";\nimport { wrapHook } from \"./internal/index.js\";\nvar NULL_PLACEHOLDER = [];\nexport function useSuspenseFragment(options) {\n  return wrapHook(\"useSuspenseFragment\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useSuspenseFragment_, useApolloClient(typeof options === \"object\" ? options.client : undefined))(options);\n}\nfunction useSuspenseFragment_(options) {\n  var client = useApolloClient(options.client);\n  var from = options.from,\n    variables = options.variables;\n  var cache = client.cache;\n  var id = React.useMemo(function () {\n    return typeof from === \"string\" ? from : from === null ? null : cache.identify(from);\n  }, [cache, from]);\n  var fragmentRef = id === null ? null : getSuspenseCache(client).getFragmentRef([id, options.fragment, canonicalStringify(variables)], client, __assign(__assign({}, options), {\n    variables: variables,\n    from: id\n  }));\n  var _a = React.useState(fragmentRef === null ? NULL_PLACEHOLDER : [fragmentRef.key, fragmentRef.promise]),\n    current = _a[0],\n    setPromise = _a[1];\n  React.useEffect(function () {\n    if (fragmentRef === null) {\n      return;\n    }\n    var dispose = fragmentRef.retain();\n    var removeListener = fragmentRef.listen(function (promise) {\n      setPromise([fragmentRef.key, promise]);\n    });\n    return function () {\n      dispose();\n      removeListener();\n    };\n  }, [fragmentRef]);\n  if (fragmentRef === null) {\n    return {\n      data: null\n    };\n  }\n  if (current[0] !== fragmentRef.key) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    current[0] = fragmentRef.key;\n    current[1] = fragmentRef.promise;\n  }\n  var data = __use(current[1]);\n  return {\n    data: data\n  };\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSuspenseFragment.ts"],"names":[],"mappings":";AAQA,SAAS,kBAAkB,QAAQ,sBAAsB;AACzD,SAAS,eAAe,QAAQ,sBAAsB;AACtD,SAAS,gBAAgB,QAAQ,sBAAsB;AACvD,OAAO,KAAK,KAAK,MAAM,SAAS;AAEhC,SAAS,KAAK,QAAQ,qBAAqB;AAC3C,SAAS,QAAQ,QAAQ,qBAAqB;AA6C9C,IAAM,gBAAgB,GAAG,EAGxB;AAoCD,OAAM,SAAU,mBAAmB,CAIjC,OAAsD,EAAA;EAEtD,OAAO,QAAQ,CACb,qBAAqB;EACrB;EACA,oBAAoB,EACpB,eAAe,CAAC,OAAO,OAAO,KAAK,QAAQ,GAAG,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC,CAC1E,CAAC,OAAO,CAAC;AACZ;AAEA,SAAS,oBAAoB,CAI3B,OAAsD,EAAA;EAEtD,IAAM,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC;EACtC,IAAA,IAAI,GAAgB,OAAO,CAAA,IAAvB;IAAE,SAAS,GAAK,OAAO,CAAA,SAAZ;EACf,IAAA,KAAK,GAAK,MAAM,CAAA,KAAX;EAEb,IAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CACtB,YAAA;IACE,OAAA,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,GAC7B,IAAI,KAAK,IAAI,GAAG,IAAI,GACpB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;EAFtB,CAEsB,EACxB,CAAC,KAAK,EAAE,IAAI,CAAC,CACG;EAElB,IAAM,WAAW,GACf,EAAE,KAAK,IAAI,GAAG,IAAI,GAChB,gBAAgB,CAAC,MAAM,CAAC,CAAC,cAAc,CACrC,CAAC,EAAE,EAAE,OAAO,CAAC,QAAQ,EAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC,EACrD,MAAM,EAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACD,OAAO,CAAA,EAAA;IAAE,SAAS,EAAE,SAAuB;IAAE,IAAI,EAAE;EAAE,CAAA,CAAA,CAE7D;EAEC,IAAA,EAAA,GAAwB,KAAK,CAAC,QAAQ,CAGxC,WAAW,KAAK,IAAI,GAAG,gBAAgB,GACrC,CAAC,WAAW,CAAC,GAAG,EAAE,WAAW,CAAC,OAAO,CACtC,CACF;IANI,OAAO,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,UAAU,GAAA,EAAA,CAAA,CAAA,CAMvB;EAED,KAAK,CAAC,SAAS,CAAC,YAAA;IACd,IAAI,WAAW,KAAK,IAAI,EAAE;MACxB;IACF;IAEA,IAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAA,CAAE;IACpC,IAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,OAAO,EAAA;MAChD,UAAU,CAAC,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC;IAEF,OAAO,YAAA;MACL,OAAO,CAAA,CAAE;MACT,cAAc,CAAA,CAAE;IAClB,CAAC;EACH,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;EAEjB,IAAI,WAAW,KAAK,IAAI,EAAE;IACxB,OAAO;MAAE,IAAI,EAAE;IAAI,CAAE;EACvB;EAEA,IAAI,OAAO,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,GAAG,EAAE;IAClC;IACA,OAAO,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,GAAG;IAC5B,OAAO,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,OAAO;EAClC;EAEA,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;EAE9B,OAAO;IAAE,IAAI,EAAA;EAAA,CAAE;AACjB","sourcesContent":["import type {\n  ApolloClient,\n  DocumentNode,\n  OperationVariables,\n  Reference,\n  StoreObject,\n  TypedDocumentNode,\n} from \"../../core/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport * as React from \"rehackt\";\nimport type { FragmentKey } from \"../internal/cache/types.js\";\nimport { __use } from \"./internal/__use.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { FragmentType, MaybeMasked } from \"../../masking/index.js\";\nimport type { NoInfer, VariablesOption } from \"../types/types.js\";\n\ntype From<TData> =\n  | StoreObject\n  | Reference\n  | FragmentType<NoInfer<TData>>\n  | string\n  | null;\n\nexport type UseSuspenseFragmentOptions<\n  TData,\n  TVariables extends OperationVariables,\n> = {\n  /**\n   * A GraphQL document created using the `gql` template string tag from\n   * `graphql-tag` with one or more fragments which will be used to determine\n   * the shape of data to read. If you provide more than one fragment in this\n   * document then you must also specify `fragmentName` to select a single.\n   */\n  fragment: DocumentNode | TypedDocumentNode<TData, TVariables>;\n\n  /**\n   * The name of the fragment in your GraphQL document to be used. If you do\n   * not provide a `fragmentName` and there is only one fragment in your\n   * `fragment` document then that fragment will be used.\n   */\n  fragmentName?: string;\n  from: From<TData>;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n  /**\n   * The instance of `ApolloClient` to use to look up the fragment.\n   *\n   * By default, the instance that's passed down via context is used, but you\n   * can provide a different instance here.\n   *\n   * @docGroup 1. Operation options\n   */\n  client?: ApolloClient<any>;\n} & VariablesOption<NoInfer<TVariables>>;\n\nexport type UseSuspenseFragmentResult<TData> = { data: MaybeMasked<TData> };\n\nconst NULL_PLACEHOLDER = [] as unknown as [\n  FragmentKey,\n  Promise<MaybeMasked<any> | null>,\n];\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables> & {\n    from: NonNullable<From<TData>>;\n  }\n): UseSuspenseFragmentResult<TData>;\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables> & {\n    from: null;\n  }\n): UseSuspenseFragmentResult<null>;\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables> & {\n    from: From<TData>;\n  }\n): UseSuspenseFragmentResult<TData | null>;\n\nexport function useSuspenseFragment<\n  TData,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables>\n): UseSuspenseFragmentResult<TData>;\n\nexport function useSuspenseFragment<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables>\n): UseSuspenseFragmentResult<TData | null> {\n  return wrapHook(\n    \"useSuspenseFragment\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useSuspenseFragment_,\n    useApolloClient(typeof options === \"object\" ? options.client : undefined)\n  )(options);\n}\n\nfunction useSuspenseFragment_<\n  TData = unknown,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  options: UseSuspenseFragmentOptions<TData, TVariables>\n): UseSuspenseFragmentResult<TData | null> {\n  const client = useApolloClient(options.client);\n  const { from, variables } = options;\n  const { cache } = client;\n\n  const id = React.useMemo(\n    () =>\n      typeof from === \"string\" ? from\n      : from === null ? null\n      : cache.identify(from),\n    [cache, from]\n  ) as string | null;\n\n  const fragmentRef =\n    id === null ? null : (\n      getSuspenseCache(client).getFragmentRef(\n        [id, options.fragment, canonicalStringify(variables)],\n        client,\n        { ...options, variables: variables as TVariables, from: id }\n      )\n    );\n\n  let [current, setPromise] = React.useState<\n    [FragmentKey, Promise<MaybeMasked<TData> | null>]\n  >(\n    fragmentRef === null ? NULL_PLACEHOLDER : (\n      [fragmentRef.key, fragmentRef.promise]\n    )\n  );\n\n  React.useEffect(() => {\n    if (fragmentRef === null) {\n      return;\n    }\n\n    const dispose = fragmentRef.retain();\n    const removeListener = fragmentRef.listen((promise) => {\n      setPromise([fragmentRef.key, promise]);\n    });\n\n    return () => {\n      dispose();\n      removeListener();\n    };\n  }, [fragmentRef]);\n\n  if (fragmentRef === null) {\n    return { data: null };\n  }\n\n  if (current[0] !== fragmentRef.key) {\n    // eslint-disable-next-line react-compiler/react-compiler\n    current[0] = fragmentRef.key;\n    current[1] = fragmentRef.promise;\n  }\n\n  const data = __use(current[1]);\n\n  return { data };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}